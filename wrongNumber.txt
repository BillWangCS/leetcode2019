942.go
894.go
338.go follow up
Stores the former results.
class Solution {
public:
  vector<int> countBits(int num) {
    vector<int> dp(num+1,0);
    for(int i=1; i<num+1; ++i)
      dp[i] = dp[i>>1] + (i&1);

    return dp;
  }
};
969.go pancake sort.请用正常思维考虑问题。。。
739.go stack in go
889.go 过了但需要再练习
932.go DP解决有递推关系的问题
696.go force break 超时
447.go 直接DFS会超时
453.go 直接贪心，算出所有的elem和min elem的差并加和.
Skip number:
983.go No idea, just skip it for now.
1017.go 超nice的方法，不断在neg位加上2*neg值补全差值
746.go 同是DP只有迭代不超时
1042.go Skipped for a while
309.go
 /*
 Basically, you want to keep track of maximum profits in two different states for each price: buy and sell.

We start off by setting the current buy state (b0) and previous buy state (b1) to negative numbers.
Next all sell states s0, s1, s2 are set to 0.

Starting at the 2nd price (we ignore first becase we can't have a profit in 1 day),
 we decide the maximum profit for buy on this day. We choose between yesterday's buy max profit or buying
 today (comparing selling 2 days ago + cooldown yesterday). Then, we find max profit for today's sell with yesterday's
 sell price vs. today's price - buying it from yesterday.

At the end, we return the last sell price (because that's the last time you could've made a profit.
 You can't make a profit by buying on the last day)
  */
836.go 补集好求，请求补集后取反
1018.go
1043.go DP